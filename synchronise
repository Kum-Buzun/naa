#!/bin/bash
#Copyright 2008-2009 Christopher Smart, under GPLv3 (a copy included in COPYING)

#Hi there. This script mounts an external device and rsyncs the ubuntu repository and clamav virus definitions.

# Some bash things:
# exists: -e
# is a file: -f
# is a directory: -d
# returned value is not null: -n
# is zero: -z
# something is equal to something else: =
# something is NOT equal to something else: != 
# or -o
# and -a

if [ -z "`ps ax |grep [u]pdate-system`" ]
then
	echo "Do not run this script directly, it is called by 'update-system'"
	echo "Exiting"
	exit 1
fi

#Variables should exist in the shell as they were exported by the 'update-system' script
#Version of Debian/Ubuntu for servers - this is used to set /etc/apt/sources.list
DISTRO=`cat /etc/lsb-release 2>/dev/null |grep DISTRIB_CODENAME |awk -F "=" {'print $2'}`

#To overwrite the automatically generated DISTRO above, unmask and set the following
#DISTRO=hardy

#Set higher priority for installing packages in Debian so we aren't prompted
DEBIAN_PRIORITY=critical

#Set file for errors and completion status
ERRORFILE="/var/log/update-system/mount-update-drive-error-`date +%Y%m%d%H%M`"
COMPLETEFILE="/var/log/update-system/system-update-completed-`date +%Y%m%d%H%M`"

#Getting the network broadcast
NETWORK=`ifconfig eth0 |grep "inet addr" |grep -v 127.0.0.1 |awk -F ":" {'print $3'} |awk {'print $1'} |sed s/255/0/g`

#Check that this is being run on a system we support (currently either Debian or Ubuntu)
if [ -e /etc/lsb-release ]
then
	SYSTEM=`cat /etc/lsb-release  |grep DISTRIB_ID |awk -F "=" {'print $2'}`
	if [ $SYSTEM != Debian -a $SYSTEM != Ubuntu ]
	then
		echo "You don't seem to be running Debian or Ubuntu. This script won't work."
		echo "Exiting."
		echo ""
		exit 1
	fi
else
	echo "Hmm... I can't tell what Linux you're running, exiting."
	echo ""
	exit 1
fi

#Create log location
if [ ! -e /var/log/update-system ]
then
	mkdir -p /var/log/update-system
else
	if [ ! -d /var/log/update-system ]
	then
		echo "Log location exists, but is not a directory, exiting."
		echo ""
		exit 1
	fi
fi

clear

#Check if this is a new install
if [ "$STATUS" = "new" ]
then
	clear
	echo "---------------------------------------------------------"
	echo "Looks like you want to set up a new server, let's do it.."

	echo "----------------------------------------------------"
	echo "Synchronising updates (this will take a long time).."
	rsync -a $MOUNTPOINT/data /

	if [ $? == 0 ]
	then
		echo "Synchronisation - SUCCESS" >> $COMPLETEFILE
	else
		echo "----------------------------------------"
		echo "Synchronisation didn't succeed, exiting."
		echo ""
		exit 1
	fi

	echo "---------------------------"
	echo "Updating operating system.."
	#set up sources.lst
	if [ -z "`grep "/data/debs/" /etc/apt/sources.list`" ]
	then
		echo "deb file:///data/debs/ubuntu $DISTRO main restricted universe multiverse" > /etc/apt/sources.list
		echo "deb file:///data/debs/ubuntu $DISTRO-updates main restricted universe multiverse" >> /etc/apt/sources.list
		echo "deb file:///data/debs/ubuntu $DISTRO-security main restricted universe multiverse" >> /etc/apt/sources.list
	fi
	apt-get -qq update &>/dev/null
	apt-get -qq -y dist-upgrade
	apt-get -qq -y --purge autoremove &>/dev/null
	clear
	echo "---------------------------------------------------------"
	echo "Looks like you want to set up a new server, let's do it.."
	echo "----------------------------------------------------"
	echo "Synchronising updates (this will take a long time).."
	echo "---------------------------"
	echo "Updating operating system.."


	#Install apache
	echo "--------------------------------------------------------"
	echo "Installing web server and configuring Linux repository.."
	apt-get -qq -y install apache2 &>/dev/null

	#Set up deb archive links for clients
	cd /var/www/
	for x in `ls $MOUNTPOINT/data/debs`
	do
		ln -sf /data/debs/$x
	done
	ln -sf /data/keys

	#Add update drive to fstab
	if [ -z "`grep $DEVICE /etc/fstab`" ]
	then
		echo "UUID=$DEVICEUUID $MOUNTPOINT auto noauto,noatime 0 0" >> /etc/fstab
	fi

	#Installing packages
	update-rc.d -f apparmor remove &>/dev/null
	/etc/init.d/apparmor stop &>/dev/null
	echo "---------------------"
	echo "Installing services.."
	apt-get -qq -y install bash-completion bind9 dovecot-imapd dovecot-common gpm htop logwatch mutt nfs-kernel-server openssh-server postfix postgresql-8.3 vim

	clear
	echo "---------------------------------------------------------"
	echo "Looks like you want to set up a new server, let's do it.."
	echo "----------------------------------------------------"
	echo "Synchronising updates (this will take a long time).."
	echo "---------------------------"
	echo "Updating operating system.."
	echo "--------------------------------------------------------"
	echo "Installing web server and configuring Linux repository.."
	echo "---------------------"
	echo "Installing services.."
	echo "-------------------------------------------"
	echo "Installation complete, configuring system.."

	#Configure system
	#Postfix changes
	echo "`dnsdomainname`" > /etc/mailname
	sed -i s/#myorigin/myorigin/g /etc/postfix/main.cf
	sed -i s/mydestination\ =/mydestination\ =\ `dnsdomainname`,/g /etc/postfix/main.cf
	sed -i s/mynetworks\ =/mynetworks\ =\ $NETWORK\\/24,/g /etc/postfix/main.cf
	/etc/init.d/postfix reload &>/dev/null


	#Setting up bash colouring
	echo "#Setting decent colour prompt" >> /home/dpadmin/.bashrc
	echo "if [ \${EUID} -eq 0 ] ; then export PS1='\[\033[01;31m\]\h\[\033[01;34m\] \W \\$\[\033[00m\] ' ; else export PS1='\[\033[01;32m\]\u@\h\[\033[01;34m\] \w \\$\[\033[00m\] ' ; fi" >> /home/dpadmin/.bashrc
	echo "#Setting decent colour prompt" >> /root/.bashrc
	echo "if [ \${EUID} -eq 0 ] ; then export PS1='\[\033[01;31m\]\h\[\033[01;34m\] \W \\$\[\033[00m\] ' ; else export PS1='\[\033[01;32m\]\u@\h\[\033[01;34m\] \w \\$\[\033[00m\] ' ; fi" >> /root/.bashrc


	#Set up highlighting and jump in vim
	sed -i s/\"syntax\ on/syntax\ on/g /etc/vim/vimrc
	sed -i s/\"\ Uncomment\ the\ following\ to\ have\ Vim\ jump/\"\ THIS\ IS\ SET\ AT\ END\ -\ Uncomment\ the\ following\ to\ have\ Vim\ jump/g /etc/vim/vimrc
	cat << EOF >> /etc/vim/vimrc
	
	" Setting jump to last position
	if has("autocmd")
	  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
	    \| exe "normal! g'\"" | endif
	endif
EOF
	#set up ssh keys

	#Set system to use vim for editor
	update-alternatives --set editor /usr/bin/vim.basic &>/dev/null

	#create dpuser and add groups
	useradd -g users -u 1001 -m -s /bin/bash -p "\$1\$txXrxyT2\$2/z9.b/xazwqnsJskz7o./" dpuser &>/dev/null
	groupadd dpuser &>/dev/null
	for x in dpuser
	do
		gpasswd -a dpuser $x
	done
	
	#configure nfs
	echo "/data/dpr `echo $NETWORK |sed s/.0$/.*/g`(rw,sync,no_subtree_check)" >> /etc/exports
	/etc/init.d/nfs-kernel-server reload &>/dev/null

	#set up /etc/hosts localhost to point to fqdn 
	sed -i /^127.0.0.1/c\127.0.0.1\\t`hostname -f`\\t`hostname`\\tlocalhost.localdomain\\tlocalhost /etc/hosts

	#configure dns

	#configure sudo to run update-system without password

	echo "Setting up first time server - SUCCESS" >> $COMPLETEFILE
else
	#We want to run the sync anyway
	echo "-----------------------"
	echo "Synchronising updates.."
	rsync -a $MOUNTPOINT/data /

	if [ $? == 0 ]
	then
		echo "Synchronisation - SUCCESS" >> $COMPLETEFILE
	else
		echo "----------------------------------------"
		echo "Synchronisation didn't succeed, exiting."
		echo ""
		exit 1
	fi
fi

#Update antivirus definitions
if [ -n "`dpkg -l |grep apache2`" -a -d "/var/www" ]
	then
		echo "-----------------------------------"
		echo "Updating online virus definitions.."
		rsync -a /data/clamav/db/*cvd /var/www/
	if [ $? == 0 ]
		then
			echo "Copy ClamAV definitions to Apache - SUCCESS" >> $COMPLETEFILE
		else
			echo "-------------------------------------------------------"
			echo "Couldn't copy ClamAV definitions successfully, exiting."
			echo ""
			exit 1
		fi
	else
		echo "------------------------------------"
		echo "Skipping antivirus update."
		echo "Copy ClamAV definitions to Apache - SKIPPED" >> $COMPLETEFILE
fi

#Quietly update apt database
echo "-----------------------------------------"
echo "Updating package local package database.."
apt-get -qq update
if [ $? == 0 ]
then
	echo "Update apt database - SUCCESS" >> $COMPLETEFILE
else
	echo "------------------------------------------------"
	echo "Couldn't update local package database, exiting."
	echo ""
	exit 1
fi

#Print datestamp of virus defs
echo "-----------------------------"
echo "Checking ClamAV definitions.."
#Testing if the date on the ClamAV definitions are less than three days old. If so, good. If not, print check.
if [ `stat -c %Y /data/clamav/db/daily.cvd` -lt `date +%s --date "2 days ago"` ]
	then
		echo "Today is `date +%Y-%m-%d`."
		echo "Latest daily.cvd is dated `stat -c %y /data/clamav/db/daily.cvd |awk {'print $1'}`."
		echo "Latest main.cvd is dated `stat -c %y /data/clamav/db/main.cvd |awk {'print $1'}`."
		echo "Please compare the dates."
		echo ""
		echo "** HIT ENTER TO CONTINUE **"
		read
		echo "ClamAV definitions update - CHECK DATES" >> $COMPLETEFILE
	else
		echo "ClamAV definitions update - SUCCESS" >> $COMPLETEFILE
fi

#If this is marlin, backup the Amanda config files
if [ `hostname` == "marlin" -o `hostname -f` == "marlin.dr.lan" ]
	then
		echo "--------------------------------"
		echo "Backing up Amanda config files.."
		mkdir -p $MOUNTPOINT/backup/marlin/etc/ 2>/dev/null
		rsync -a /etc/amanda* $MOUNTPOINT/backup/marlin/etc/
		rsync -a /usr/local/bin $MOUNTPOINT/backup/marlin/usr/local/
		echo "--------------------------------"
		echo "Amanda config backup - SUCCESS" >> $COMPLETEFILE
	else
		echo "-----------------------------"
fi

#Clean up error file - keeping these as logs now
#rm $ERRORFILE 2>/dev/null

#Summary of update
echo ""
echo "SUMMARY"
echo "-------"
echo "`cat $COMPLETEFILE`"
echo ""

#Clean up - keeping these as logs now
#rm $COMPLETEFILE

if [ "$STATUS" = "new" ]
then
	echo "Server configuration complete. Please reboot."
	echo ""
fi
