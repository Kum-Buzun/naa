#!/bin/bash

#Copyright 2008-2009 Christopher Smart, under GPLv3 (a copy included in COPYING)

#NOTES:
#The purpose of this script is to:
#Mount the external update drive
#Copy the synchronise script (which might have changes)
#Execute the synchronise script from the local machine

#This script should only ever set variables, mount the drive, copy the script and execute it.
#Everything else should be done in the synchronise script, so theoreticallty file should never change (except when using a new update drive).

#If the physical drive changes, all you need to do is update DEVICEUUID variable.
#Specify the UUID of the external unit (get with `sudo vol_id -u /dev/sdXX`) and mountpoint.
export DEVICEUUID="9c15b64f-d797-4ea2-a47b-86d69bd71d62"
export MOUNTPOINT=/media/update-drive

#Set file for errors and completion status
export ERRORFILE="/var/log/update-system/mount-update-drive-error-`date +%Y%m%d%H%M`"
export COMPLETEFILE="/var/log/update-system/system-update-completed-`date +%Y%m%d%H%M`"

#Check that we're root
if [ $EUID != 0 ]
then
	echo ""
	echo "You must run this as root, prepend sudo."
	echo "Exiting."
	echo ""
	exit 1
fi

#Create log location
if [ ! -e /var/log/update-system ]
then
	mkdir -p /var/log/update-system
else
	if [ ! -d /var/log/update-system ]
	then
		echo "Log location exists, but is not a directory, exiting."
		echo ""
		exit 1
	fi
fi

#We're going to grab the device by UUID and convert to SCSI syntax.
export DEVICE="`ls -l /dev/disk/by-uuid/$DEVICEUUID 2>/dev/null |awk {'print $10'} |sed s/"..\/..\/"/"\/dev\/"/`"

#Where the Device is mounted, so we can check if it's running from there later
MOUNTED="`df -h |grep $DEVICE 2>/dev/null |awk {'print $6'}`"

#Check to see if this command is being run from the drive. If it is, exit. If not, continue.
if [ -n "`ps x |grep $MOUNTPOINT 2>/dev/null`" -o -n "`pwd |grep $MOUNTPOINT 2>/dev/null`" -o -n "`df -h . |grep $DEVICE`" -o -n "`for x in $MOUNTED ; do ps ax |grep [u]pdate-system |grep $x 2>/dev/null ; done`" ]
then
	mkdir /tmp/mount-external-drive &>/dev/null
	mount $DEVICE /tmp/mount-external-drive &>/dev/null
	cp -a /tmp/mount-external-drive/scripts/* /usr/local/bin/ &>/dev/null
	chmod a+x /usr/local/bin/* &>/dev/null
	sync
	for x in `grep $DEVICE /proc/mounts |awk {'print $2'}`
	do
		umount $x 2>$ERRORFILE
	done
	rmdir /tmp/mount-external-drive &>/dev/null
	if [ -n "`grep $DEVICE /proc/mounts`" ]
	then
		echo ""
		echo "You appear to be running the script from the external drive itself."
		echo "=============================="
		echo "** PLEASE UN-MOUNT THE UNIT **"
		echo "=============================="
		echo "Simply run the following (pass in 'new' if this is a new install):"
		echo ""
		echo "sudo umount $MOUNTED ; sudo update-system"
		echo ""
		exit 1
	else
		echo ""
		echo "Whoops, you appear to be running the script from the external drive itself."
		echo "Please run the following (pass in 'new' if this is a new install):"
		echo ""
	        echo "sudo update-system"
		echo ""
		exit 1
	fi
fi

if [ -n "$1" ]
then
	if [ `echo $1` = "new" ]
	then
		export STATUS="new"
	fi
fi

#Make sure the device is plugged in!
if [ ! -n "$DEVICE" ]
	then
		echo "Can't find device, trying again in 15 seconds..."
		echo "(Press CTRL+C to cancel)"
		echo ""
		sleep 15
fi

if [ -n "$DEVICE" ]
then
	echo "Device exists, that's a good start."
	echo ""
	sleep 1
else
	echo ""
	echo "Ahh.. have you plugged in the device and turned it on??" 
	echo "Exiting."
	echo ""
	exit 1
fi

#Check if the mount point exists, if not, create it.
echo "Attempting to mount external unit.."
echo ""
sleep 1
if [ ! -e "$MOUNTPOINT" ]
then
	mkdir -p $MOUNTPOINT
elif [ ! -d "$MOUNTPOINT" ]
	then
		echo "$MOUNTPOINT exists, but it is not a directory, please fix."
		echo "Exiting."
		echo ""
		exit 1
fi

#Mount device.
mount $DEVICE $MOUNTPOINT 2>$ERRORFILE

#Check mount was successful, or exit.
if [ -n "`cat /proc/mounts |grep $DEVICE |grep $MOUNTPOINT`" ] 
	then
		echo "Mounted successfully."
		echo ""
		sleep 2
	else
		echo "Could not mount unit, please fix."
		echo ""
		echo "Error:"
		echo "`cat $ERRORFILE`."
		echo ""
		echo "Exiting."
		exit 1
fi

for x in update-system synchronise
do
	cp $MOUNTPOINT/scripts/$x /usr/local/bin/ 2>/dev/null
	chmod a+x /usr/local/bin/$x 2>/dev/null
done

#Execute the synchronisation script to do the updating.
/usr/local/bin/synchronise

#Now that the update is finished, unmount external drive.
while [ -n "`grep $DEVICE /proc/mounts`" ]
do
	for x in `grep $DEVICE /proc/mounts |awk {'print $2'}`
	do
		umount $x 2>$ERRORFILE
	done
done

if [ -n "`grep $DEVICE /proc/mounts`" ]
then
	echo "=================================================================="
	echo "** Could not unmount the external unit, please unmount manually **"
	echo "=================================================================="
	echo ""
	echo "Error:"
	echo "echo `cat $ERRORFILE`"
	echo ""
else
	echo "=================================="
	echo "** External unit safe to remove **"
	echo "=================================="
	echo ""
fi

#Unset variables.
#for x in COMPLETEFILE DEBIAN_PRIORITY DEVICE DEVICEUUID DISTRO ERRORFILE MOUNTPOINT NETWORK STATUS
for x in DEVICE DEVICEUUID MOUNTPOINT STATUS
do
	unset $x
done
