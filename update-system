#!/bin/bash
#Copyright 2008-2009 Christopher Smart, under GPLv3 (a copy included in COPYING)

#This is a helper script run from an external drive which copies and runs the "synchronise" script on the machine (so I can make changes in one location and have it propogated to all systems).

# Some useful bash things:
# exists: -e
# is a file: -f
# is a directory: -d
# returned value is not null: -n
# is zero: -z
# something is equal to something else: =
# something is NOT equal to something else: != 
# or -o
# and -a


if [ $EUID != 0 ]
then
	echo ""
	echo "You must run this as root, prepend sudo."
	echo "Exiting."
	echo ""
	exit 1
fi


#Setting variables - we are exporting them so that they will also exist in the 'synchronise' script, which is called by this one.

#Version of Debian/Ubuntu for servers
export DISTRO=intrepid

#Set higher priority for installing packages in Debian so we aren't prompted
export DEBIAN_PRIORITY=critical

#Set file for errors and completion status
export ERRORFILE="/var/log/update-system/mount-update-drive-error-`date +%Y%m%d%H%M`"
export COMPLETEFILE="/var/log/update-system/system-update-completed-`date +%Y%m%d%H%M`"

#Specify the mount point
export MOUNTPOINT=/mnt/update-drive

#Specify the UUID of the external unit (get with `sudo vol_id -u /dev/sdXX`).
export DEVICEUUID="9c15b64f-d797-4ea2-a47b-86d69bd71d62"

#Grab the device by UUID and convert to SCSI syntax.
export DEVICE="`ls -l /dev/disk/by-uuid/$DEVICEUUID |awk {'print $10'} |sed s/"..\/..\/"/"\/dev\/"/ 2>/dev/null`"
echo  ""

export NETWORK=`ifconfig eth0 |grep "inet addr" |grep -v 127.0.0.1 |awk -F ":" {'print $3'} |awk {'print $1'} |sed s/255/0/g`

#Need to check if this is being run from the mounted unit, which we can't do cause we want to unmount it in the end.
TEMPMOUNT="`cat /proc/mounts |grep $DEVICE |awk {'print $2'}`"
if [ -n "$TEMPMOUNT" ]
then
	mkdir /tmp/mount-external-drive &>/dev/null
	mount $DEVICE /tmp/mount-external-drive &>/dev/null
	cp -a /tmp/mount-external-drive/scripts/* /usr/local/bin/ &>/dev/null
	chmod a+x /usr/local/bin/* &>/dev/null
	sync
	for x in `grep $DEVICE /proc/mounts |awk {'print $2'}`
	do
		umount $x 2>$ERRORFILE
	done
	rmdir /tmp/mount-external-drive &>/dev/null
	if [ -n "`grep $DEVICE /proc/mounts`" ]
	then
		echo "The drive is still mounted. Please unmount and run:"
		echo "sudo update-system"
		echo ""
		exit 1
	else
		echo "The drive was still mounted. Please run:"
		echo "sudo update-system"
		exit 1
	fi
fi

#Create log location
if [ ! -e /var/log/update-system ]
then
	mkdir -p /var/log/update-system
else
	if [ ! -d /var/log/update-system ]
	then
		echo "Log location exists, but is not a directory, exiting."
		echo ""
		exit 1
	fi
fi

if [ -n "$1" ]
then
	if [ `echo $1` = "new" ]
	then
		export STATUS="new"
	fi
fi

#Make sure the device is plugged in!
if [ ! -n "$DEVICE" ]
	then
		echo "Can't find device, trying again in 10 seconds..."
		echo ""
		sleep 10
fi

if [ -n "$DEVICE" ]
	then
		echo "Device exists, that's a good start."
		echo ""
	else
		echo ""
		echo "Ahh.. have you plugged in the device and turned it on??" 
		echo "Exiting."
		echo ""
		exit 1
fi

#Check if the mount point exists, if not, create it.
echo "Attempting to mount external unit.."
sleep 1
if [ ! -e "$MOUNTPOINT" ]
then
	mkdir -p $MOUNTPOINT
elif [ ! -d "$MOUNTPOINT" ]
	then
		echo "$MOUNTPOINT exists, but it is not a directory, please fix."
		echo "Exiting."
		echo ""
		exit 1
fi

#Mount device.
mount $DEVICE $MOUNTPOINT 2>$ERRORFILE

#Check mount was successful, or exit
if [ -n "`cat /proc/mounts |grep $DEVICE |grep $MOUNTPOINT`" ] 
	then
		echo "Mounted successfully."
		echo ""
		sleep 1
	else
		echo "Could not mount unit, please fix."
		echo ""
		echo "Error:"
		echo "`cat $ERRORFILE`."
		echo ""
		echo "Exiting."
		echo ""
		exit
fi

cp $MOUNTPOINT/scripts/update-system /usr/local/bin/update-system
cp $MOUNTPOINT/scripts/synchronise /usr/local/bin/synchronise
chmod +x /usr/local/bin/update-system
chmod +x /usr/local/bin/synchronise

#Run the synchronise script to do the actual copying
/usr/local/bin/synchronise

#Unmount external drive

while [ -n "`grep $DEVICE /proc/mounts`" ]
do
	for x in `grep $DEVICE /proc/mounts |awk {'print $2'}`
	do
		umount $x 2>$ERRORFILE
	done
done

if [ -n "`grep $DEVICE /proc/mounts`" ]
then
	echo "=================================================================="
	echo "** Could not unmount the external unit, please unmount manually **"
	echo "=================================================================="
	echo ""
	echo "Error:"
	echo "echo `cat $ERRORFILE`"
	echo ""
else
	echo "=================================="
	echo "** External unit safe to remove **"
	echo "=================================="
	echo ""
fi

#Unset variables
for x in COMPLETEFILE DEBIAN_PRIORITY DEVICE DEVICEUUID DISTRO ERRORFILE MOUNTPOINT NETWORK
do unset $x
done

